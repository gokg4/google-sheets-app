<!DOCTYPE html>
<html>
<head>
    <title>Indiraa & Nisshanth Marriage Hall Expenses</title>

    <!-- Standard SEO -->
    <meta name="description" content="A summary of wedding expenses for Indiraa and Nisshanth's marriage hall.">
    <meta name="author" content="Your Name or Company">

    <!-- Favicon -->
    <link rel="icon" href="/images/favicon.png" sizes="any">
    <link rel="icon" href="/images/favicon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/images/apple-touch-icon.png">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://indiraa-hall-expense.netlify.app/">
    <meta property="og:title" content="Indiraa & Nisshanth Marriage Hall Expenses">
    <meta property="og:description" content="A summary of wedding expenses for Indiraa and Nisshanth's marriage hall.">
    <meta property="og:image" content="https://indiraa-hall-expense.netlify.app/images/social-preview.png">
    <meta property="og:image:secure_url" content="https://indiraa-hall-expense.netlify.app/images/social-preview.png">
    <meta property="og:image:type" content="image/png">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://indiraa-hall-expense.netlify.app/">
    <meta property="twitter:title" content="Indiraa & Nisshanth Marriage Hall Expenses">
    <meta property="twitter:description" content="A summary of wedding expenses for Indiraa and Nisshanth's marriage hall.">
    <meta property="twitter:image" content="https://indiraa-hall-expense.netlify.app/images/social-preview.png">

    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }
        .error {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>

    <h1>Indiraa & Nisshanth Marriage Hall Expenses</h1>

    <table id="expensesTable">
        <thead>
            <tr id="tableHeaders">
                <!-- Headers will be inserted here by JavaScript -->
            </tr>
        </thead>
        <tbody id="tableBody">
            <!-- Rows will be inserted here by JavaScript -->
        </tbody>
    </table>
    <p id="error-message" class="error"></p>

    <script>
        // The Go program injects the spreadsheet ID here at build time.
        const spreadsheetId = '''{{.SpreadsheetID}}''';
        const sheetId = '0';
        // Request JSON output, which is more robust for handling empty cells
        const url = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:json&gid=${sheetId}`;

        document.addEventListener('DOMContentLoaded', () => {
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Network response was not ok: ${response.statusText}`);
                    }
                    return response.text();
                })
                .then(text => {
                    // The response is not pure JSON. It's JSONP. We need to extract the JSON part.
                    const jsonString = text.match(/google\.visualization\.Query\.setResponse\((.*)\)/s)[1];
                    const data = JSON.parse(jsonString);

                    const table = data.table;
                    if (!table || !table.cols || !table.rows) {
                        throw new Error("Invalid data format received from Google Sheets.");
                    }
                    
                    const headers = table.cols.map(col => col.label);
                    
                    const tableHeaders = document.getElementById('tableHeaders');
                    const tableBody = document.getElementById('tableBody');

                    // Clear any previous headers/rows
                    tableHeaders.innerHTML = '';
                    tableBody.innerHTML = '';

                    // Populate headers
                    headers.forEach(headerText => {
                        const th = document.createElement('th');
                        th.textContent = headerText;
                        tableHeaders.appendChild(th);
                    });

                    // Populate rows
                    table.rows.forEach(rowData => {
                        const tr = document.createElement('tr');
                        // Ensure each row has a cell for every header
                        for (let i = 0; i < headers.length; i++) {
                            const cell = rowData.c[i];
                            const td = document.createElement('td');
                            // A cell can be null if it's empty in the sheet.
                            // The value is in the 'v' property, formatted value in 'f'
                            td.textContent = cell ? (cell.f || cell.v || '') : '';
                            tr.appendChild(td);
                        }
                        tableBody.appendChild(tr);
                    });
                })
                .catch(error => {
                    console.error('Error fetching or parsing sheet data:', error);
                    document.getElementById('error-message').textContent = 'Could not load data. Please ensure the Google Sheet is public.';
                });
        });
    </script>

</body>
</html>
